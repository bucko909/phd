%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 6.0%%AI8_CreatorVersion: 9.0%%For: (. . .) (Design One)%%Title: (The Warwick Uni_blue.eps)%%CreationDate: 19/12/01 5:41 pm%%BoundingBox: 43 345 434 497%%HiResBoundingBox: 43 345.667 434 496.667%%DocumentProcessColors:%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%%DocumentCustomColors: (PANTONE 286 CVC)%%CMYKCustomColor: 1 0.6 0 0.06 (PANTONE 286 CVC)%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: -103 111 715 679%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 842 595%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 2%AI5_OpenToView: -135.5 689.5 1 1138 823 26 0 1 7 40 0 0%AI5_OpenViewLayers: 77%%PageOrigin:-103 111%%AI3_PaperRect:-12 581 830 -14%%AI3_Margin:12 -13 -12 14%AI7_GridSettings: 30 5 30 5 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 50 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 40 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIDataProc null def	/XIVersion 6 def	/XIColorSpace /DeviceGray def	/XIColorValues 0 defendcurrentdict /_colorimage known not {	/colorimage where {		/colorimage get /_colorimage exch def	}{		/_colorimage null def	} ifelse} if/_image systemdict /image get def/_currenttransfer systemdict /currenttransfer get def/FourEqual {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual { 				/plateindex 0 def			}{				0 1 0 0 FourEqual { 					/plateindex 1 def				}{					0 0 1 0 FourEqual {						/plateindex 2 def					}{						0 0 0 1 FourEqual { 							/plateindex 3 def						}{							0 0 0 0 FourEqual {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/clrspaceissepn {	type /arraytype eq } def/clrspacegetname {	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse} def/clrspacegetalt {	aload pop pop pop colormake} def/clrspacegetcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/clrspacemarksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				/findcmykcustomcolor where {					pop					dup length 2 sub get					0.1 0.1 0.1 0.1 5 -1 roll					findcmykcustomcolor 1 setcustomcolor					systemdict /currentgray get exec					1 ne				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/colormake {	dup clrspacegetcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/colorexpand {	dup clrspacegetname exch	dup clrspaceissepn {		clrspacegetalt		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				clrspacegetalt colortint colortocmyk			} ifelse		} ifelse	} ifelse} def/makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/WalkRGBString {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/CMYKToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/SeparateCMYKImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne {			sourcearray plateindex get exec		}{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub {				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/ColorImageCompositeEmulator {	pop true eq {		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse				load		 end		} if		image	} ifelse} def/colorimage {	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index end		dup 8 eq exch 1 eq or not {		/_colorimage load null ne {			_colorimage		}{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}{		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {			/_colorimage load null eq {				ColorImageCompositeEmulator			}{				dup 1 eq {					pop pop image				}{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						grestore					} if				} ifelse			} ifelse		}{			dup 1 eq {				pop pop				image			}{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0 {									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace clrspacegetcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] makeimagedict _image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] makeimagedict _image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} stringapply			} concatprocs _image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} stringapply			} concatprocs false _pticomps			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse		} ifelse	} ifelse} def/graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray proctintimage} def/cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK proctintimage} def/rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB proctintimage} def/tintimage {	TestPlateIndex -1 eq {		colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop graytintimage		}{			dup /DeviceRGB eq {				pop rgbtintimage			}{				pop cmyktintimage			} ifelse		} ifelse	}{		dup clrspacemarksplate {			plateindex 5 lt {				colortocmyk plateindex get 1 exch sub				exch {1 0}{0 1} ifelse () graytintimage			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage			} ifelse		}{			pop pop pop			{pop 1} 0 1 () /DeviceGray proctintimage		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace tintimage} def/XIImage {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIType 1 eq {			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH {	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEncoding 0 ne XIVersion 6 le and {			currentfile 128 string readline pop pop		} if		XICompression 0 eq {			/XIBuffer1 XIRowBytes string def			XIEncoding 0 eq {				{currentfile XIBuffer1 readhexstring pop}			}{				{currentfile XIBuffer1 readstring pop}			} ifelse		}{			/XIBuffer1 256 string def			/XIBuffer2 XIRowBytes string def			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}			/ASCIIHexDecode filter /DCTDecode filter			/XIFile exch def			{XIFile XIBuffer2 readstring pop}		} ifelse		/XIDataProc exch def				XIVersion 6 le {			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIType 1 eq {				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if		XIEnable {			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPc1 0.6 0 0.06 (PANTONE 286 CVC) 0 xPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Guides) Ln0 ALB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 255 79 79 Lb(Layer 1) Ln0 Au*u0 O1 0.6 0 0.06 (PANTONE 286 CVC) 0 x0 J 0 j 1 w 4 M []0 d0 XR91.2969 445.8848 m91.2969 443.8486 91.2969 442.1689 91.4043 441.2817 c91.4673 440.6626 91.5933 440.1958 92.2285 440.1113 c92.5273 440.0693 92.9946 440.0273 93.1836 440.0273 c93.3145 440.0273 93.3564 439.9644 93.3564 439.9014 c93.3564 439.7964 93.249 439.7334 93.0156 439.7334 c91.8501 439.7334 90.5117 439.7964 90.4067 439.7964 c90.2988 439.7964 88.9634 439.7334 88.3237 439.7334 c88.0923 439.7334 87.9873 439.7754 87.9873 439.9014 c87.9873 439.9644 88.0293 440.0273 88.1553 440.0273 c88.3472 440.0273 88.6016 440.0693 88.7905 440.1113 c89.2158 440.1958 89.3232 440.6626 89.4097 441.2817 c89.5146 442.1689 89.5146 443.8486 89.5146 445.8848 c89.5146 454.8604 L86.3726 454.8184 L85.0586 454.7974 84.5493 454.6504 84.2085 454.1411 c83.9771 453.7788 83.9092 453.6318 83.8462 453.4824 c83.7832 453.312 83.7202 453.27 83.6362 453.27 c83.5732 453.27 83.5313 453.333 83.5313 453.4609 c83.5313 453.6738 83.9561 455.5 83.998 455.6685 c84.04 455.7944 84.1245 456.0723 84.2085 456.0723 c84.3555 456.0723 84.5703 455.8579 85.1426 455.8154 c85.7568 455.7524 86.5649 455.7104 86.8169 455.7104 c94.7788 455.7104 L96.1333 455.7104 96.709 455.9224 96.8784 455.9224 c96.9834 455.9224 96.9834 455.7944 96.9834 455.6685 c96.9834 455.0332 96.9204 453.5688 96.9204 453.333 c96.9204 453.1436 96.8574 453.0596 96.7734 453.0596 c96.665 453.0596 96.6216 453.1226 96.6006 453.4175 c96.5796 453.6528 L96.4956 454.2881 96.0073 454.7764 93.9707 454.8184 c91.2969 454.8604 L91.2969 445.8848 lf*U*u119.1177 445.8848 m119.1177 443.8486 119.1177 442.1689 119.2241 441.2817 c119.2876 440.6626 119.4155 440.1958 120.0513 440.1113 c120.3491 440.0693 120.8159 440.0273 121.0063 440.0273 c121.1333 440.0273 121.1763 439.9644 121.1763 439.9014 c121.1763 439.7964 121.0698 439.7334 120.8369 439.7334 c119.6689 439.7334 118.3325 439.7964 118.2261 439.7964 c118.1196 439.7964 116.7832 439.7334 116.1465 439.7334 c115.9136 439.7334 115.8071 439.7754 115.8071 439.9014 c115.8071 439.9644 115.8496 440.0273 115.9775 440.0273 c116.1675 440.0273 116.4233 440.0693 116.6133 440.1113 c117.0386 440.1958 117.1436 440.6626 117.229 441.2817 c117.3354 442.1689 117.3354 443.8486 117.3354 445.8848 c117.3354 448.1147 L117.3354 448.1997 117.2715 448.2417 117.2075 448.2417 c108.2104 448.2417 L108.1475 448.2417 108.0835 448.2207 108.0835 448.1147 c108.0835 445.8848 L108.0835 443.8486 108.0835 442.1689 108.1895 441.2817 c108.2524 440.6626 108.3789 440.1958 109.0171 440.1113 c109.3125 440.0693 109.7798 440.0273 109.9717 440.0273 c110.0996 440.0273 110.1416 439.9644 110.1416 439.9014 c110.1416 439.7964 110.0356 439.7334 109.8008 439.7334 c108.6353 439.7334 107.2969 439.7964 107.1919 439.7964 c107.0864 439.7964 105.7485 439.7334 105.1128 439.7334 c104.8774 439.7334 104.7725 439.7754 104.7725 439.9014 c104.7725 439.9644 104.8145 440.0273 104.9409 440.0273 c105.1343 440.0273 105.3867 440.0693 105.5791 440.1113 c106.0029 440.1958 106.1104 440.6626 106.1948 441.2817 c106.2998 442.1689 106.2998 443.8486 106.2998 445.8848 c106.2998 449.6221 L106.2998 452.9292 106.2998 453.5259 106.2578 454.2041 c106.2158 454.9248 106.0459 455.2642 105.3447 455.4131 c105.1763 455.4565 104.8145 455.478 104.625 455.478 c104.5391 455.478 104.4526 455.5215 104.4526 455.6055 c104.4526 455.7314 104.5605 455.7734 104.7935 455.7734 c105.7485 455.7734 107.0864 455.7104 107.1919 455.7104 c107.2969 455.7104 108.6353 455.7734 109.2705 455.7734 c109.5049 455.7734 109.6118 455.7314 109.6118 455.6055 c109.6118 455.5215 109.5264 455.478 109.4404 455.478 c109.2915 455.478 109.1655 455.4565 108.9102 455.4131 c108.3364 455.3062 108.1685 454.9468 108.126 454.2041 c108.0835 453.5259 108.0835 452.9292 108.0835 449.6221 c108.0835 449.1758 L108.0835 449.0688 108.1475 449.0469 108.2104 449.0469 c117.2075 449.0469 L117.2715 449.0469 117.3354 449.0688 117.3354 449.1758 c117.3354 449.6221 L117.3354 452.9292 117.3354 453.5259 117.2925 454.2041 c117.25 454.9248 117.0806 455.2642 116.3809 455.4131 c116.21 455.4565 115.8496 455.478 115.6582 455.478 c115.5742 455.478 115.4902 455.5215 115.4902 455.6055 c115.4902 455.7314 115.5952 455.7734 115.8286 455.7734 c116.7832 455.7734 118.1196 455.7104 118.2261 455.7104 c118.3325 455.7104 119.6689 455.7734 120.3062 455.7734 c120.5396 455.7734 120.6455 455.7314 120.6455 455.6055 c120.6455 455.5215 120.5605 455.478 120.4766 455.478 c120.3276 455.478 120.1997 455.4565 119.9463 455.4131 c119.373 455.3062 119.2026 454.9468 119.1602 454.2041 c119.1177 453.5259 119.1177 452.9292 119.1177 449.6221 C119.1177 445.8848 lf*U*u131.5327 449.6221 m131.5327 452.9292 131.5327 453.5259 131.4902 454.2041 c131.4473 454.9248 131.2778 455.2642 130.5771 455.4131 c130.4077 455.4565 130.0469 455.478 129.8555 455.478 c129.771 455.478 129.686 455.5215 129.686 455.6055 c129.686 455.7314 129.792 455.7734 130.0254 455.7734 c130.9805 455.7734 132.3179 455.7104 132.4238 455.7104 c132.5723 455.7104 136.7954 455.7104 137.2832 455.7314 c137.6865 455.7524 138.0264 455.7944 138.1963 455.8364 c138.3022 455.8579 138.3867 455.9443 138.4927 455.9443 c138.5562 455.9443 138.5776 455.8579 138.5776 455.7524 c138.5776 455.6055 138.4717 455.3486 138.4082 454.7554 c138.3867 454.5449 138.3447 453.6108 138.3022 453.354 c138.2808 453.249 138.2388 453.1226 138.1533 453.1226 c138.0264 453.1226 137.9834 453.228 137.9834 453.396 c137.9834 453.5479 137.9624 453.9058 137.8564 454.1621 c137.708 454.502 137.4956 454.7554 136.3496 454.8818 c135.9888 454.9248 133.6758 454.9468 133.4424 454.9468 c133.3574 454.9468 133.3149 454.8818 133.3149 454.7344 c133.3149 448.877 L133.3149 448.7295 133.3359 448.6665 133.4424 448.6665 c133.7183 448.6665 136.3286 448.6665 136.8164 448.7085 c137.3262 448.7505 137.6226 448.7925 137.814 449.0029 c137.9624 449.1758 138.0474 449.2808 138.1323 449.2808 c138.1963 449.2808 138.2388 449.2388 138.2388 449.1128 c138.2388 448.9819 138.1323 448.6245 138.0688 447.9214 c138.0264 447.4966 137.9834 446.7144 137.9834 446.562 c137.9834 446.394 137.9834 446.1631 137.835 446.1631 c137.729 446.1631 137.6865 446.2471 137.6865 446.3521 c137.6865 446.562 137.6865 446.7773 137.6016 447.0503 c137.5166 447.3491 137.3262 447.7114 136.498 447.7954 c135.9253 447.8584 133.8242 447.9004 133.4634 447.9004 c133.3574 447.9004 133.3149 447.8374 133.3149 447.7534 c133.3149 445.8848 L133.3149 445.1655 133.2939 442.7041 133.3149 442.2578 c133.3784 440.7935 133.6973 440.5156 135.7764 440.5156 c136.3286 440.5156 137.2627 440.5156 137.814 440.7515 c138.3657 440.9829 138.6201 441.4077 138.769 442.2788 c138.8115 442.5103 138.854 442.5942 138.96 442.5942 c139.0869 442.5942 139.0869 442.4263 139.0869 442.2788 c139.0869 442.106 138.9175 440.6626 138.8115 440.2188 c138.6621 439.6655 138.4927 439.6655 137.665 439.6655 c134.4609 439.6655 133.0391 439.7964 132.4238 439.7964 c132.3179 439.7964 130.9805 439.7334 130.3438 439.7334 c130.1108 439.7334 130.0039 439.7754 130.0039 439.9014 c130.0039 439.9644 130.0469 440.0273 130.1743 440.0273 c130.3652 440.0273 130.6196 440.0693 130.811 440.1113 c131.2354 440.1958 131.3413 440.6626 131.4258 441.2817 c131.5327 442.1689 131.5327 443.8486 131.5327 445.8848 C131.5327 449.6221 lf*U*u159.8628 449.6221 m159.8628 452.9292 159.8628 453.5259 159.8203 454.2041 c159.7778 454.9248 159.6079 455.2642 158.9082 455.4131 c158.7378 455.4565 158.3774 455.478 158.186 455.478 c158.1016 455.478 158.0166 455.5215 158.0166 455.6055 c158.0166 455.7314 158.1226 455.7734 158.356 455.7734 c159.311 455.7734 160.605 455.7104 160.7964 455.7104 c160.9878 455.7104 162.2603 455.7734 162.8975 455.7734 c163.1309 455.7734 163.2368 455.7314 163.2368 455.6055 c163.2368 455.5215 163.1519 455.478 163.0669 455.478 c162.9185 455.478 162.7915 455.4565 162.5366 455.4131 c161.9639 455.3271 161.7939 454.9468 161.7515 454.2041 c161.709 453.5259 161.709 452.9292 161.709 449.6221 c161.709 446.6509 L161.709 443.5913 162.3887 442.2788 163.3008 441.4077 c164.3408 440.4316 165.2954 440.2427 166.5044 440.2427 c167.7998 440.2427 169.0728 440.8564 169.8369 441.77 c170.813 442.9771 171.0679 444.7827 171.0679 446.9663 c171.0679 449.6221 L171.0679 452.9292 171.0679 453.5259 171.0249 454.2041 c170.9824 454.9248 170.813 455.2642 170.1123 455.4131 c169.9424 455.4565 169.582 455.478 169.3906 455.478 c169.3062 455.478 169.2212 455.5215 169.2212 455.6055 c169.2212 455.7314 169.3276 455.7734 169.5605 455.7734 c170.5156 455.7734 171.6831 455.7104 171.8101 455.7104 c171.959 455.7104 172.9561 455.7734 173.5928 455.7734 c173.8262 455.7734 173.9326 455.7314 173.9326 455.6055 c173.9326 455.5215 173.8472 455.478 173.7627 455.478 c173.6143 455.478 173.4868 455.478 173.2324 455.4131 c172.6592 455.3062 172.4897 454.9468 172.4468 454.2041 c172.4043 453.5259 172.4043 452.9292 172.4043 449.6221 c172.4043 447.3491 L172.4043 445.0557 172.1499 442.5103 170.4521 441.0039 c168.9243 439.6445 167.3325 439.4346 166.0806 439.4346 c165.3594 439.4346 163.2158 439.5186 161.709 440.9409 c160.6689 441.938 159.8628 443.4233 159.8628 446.52 C159.8628 449.6221 lf*U*u184.1401 442.6152 m184.1821 440.8779 184.394 440.3267 184.9673 440.1533 c185.3706 440.0483 185.8374 440.0273 186.0288 440.0273 c186.1348 440.0273 186.1982 439.9854 186.1982 439.9014 c186.1982 439.7754 186.0708 439.7334 185.8164 439.7334 c184.6064 439.7334 183.7583 439.7964 183.5669 439.7964 c183.376 439.7964 182.4849 439.7334 181.5298 439.7334 c181.3174 439.7334 181.1899 439.7544 181.1899 439.9014 c181.1899 439.9854 181.2534 440.0273 181.3594 440.0273 c181.5298 440.0273 181.9116 440.0483 182.23 440.1533 c182.7603 440.3057 182.8667 440.9199 182.8667 442.8511 c182.8877 455.0117 L182.8877 455.8364 182.9507 456.0723 183.1211 456.0723 c183.291 456.0723 183.6519 455.6055 183.8643 455.3916 c184.1821 455.0332 187.3442 451.6162 190.6123 448.1147 c192.7134 445.8638 195.0264 443.2764 195.7056 442.5732 c195.4722 453.354 L195.4512 454.7344 195.3022 455.2012 194.6445 455.3701 c194.2622 455.4565 193.7739 455.478 193.6045 455.478 c193.4561 455.478 193.4351 455.5425 193.4351 455.6265 c193.4351 455.7524 193.6045 455.7734 193.8589 455.7734 c194.814 455.7734 195.8325 455.7104 196.0659 455.7104 c196.2993 455.7104 197 455.7734 197.8701 455.7734 c198.103 455.7734 198.252 455.7524 198.252 455.6265 c198.252 455.5425 198.167 455.478 198.0186 455.478 c197.9126 455.478 197.7637 455.478 197.5093 455.4131 c196.8091 455.2642 196.7241 454.7974 196.7241 453.5259 c196.6812 441.0879 L196.6812 439.6865 196.6387 439.5815 196.4907 439.5815 c196.3208 439.5815 196.0664 439.8174 194.9414 440.9409 c194.708 441.1509 191.6523 444.2734 189.4023 446.6934 c186.9409 449.3438 184.5435 452.0186 183.8643 452.7817 C184.1401 442.6152 lf*U*u210.3062 445.8848 m210.3062 443.8486 210.3062 442.1689 210.4111 441.2817 c210.4751 440.6626 210.6025 440.1958 211.2393 440.1113 c211.5366 440.0693 212.0029 440.0273 212.1948 440.0273 c212.3218 440.0273 212.3638 439.9644 212.3638 439.9014 c212.3638 439.7964 212.2583 439.7334 212.0244 439.7334 c210.8574 439.7334 209.52 439.7964 209.4141 439.7964 c209.3086 439.7964 207.9717 439.7334 207.3345 439.7334 c207.1011 439.7334 206.9951 439.7754 206.9951 439.9014 c206.9951 439.9644 207.0371 440.0273 207.165 440.0273 c207.3564 440.0273 207.6108 440.0693 207.8018 440.1113 c208.2266 440.1958 208.332 440.6626 208.4165 441.2817 c208.5229 442.1689 208.5229 443.8486 208.5229 445.8848 c208.5229 449.6221 L208.5229 452.9292 208.5229 453.5259 208.4805 454.2041 c208.4375 454.9248 208.2266 455.2852 207.7598 455.3916 c207.5254 455.4565 207.2505 455.478 207.1011 455.478 c207.0161 455.478 206.9312 455.5215 206.9312 455.6055 c206.9312 455.7314 207.0371 455.7734 207.2715 455.7734 c207.9717 455.7734 209.3086 455.7104 209.4141 455.7104 c209.52 455.7104 210.8574 455.7734 211.4937 455.7734 c211.7275 455.7734 211.8335 455.7314 211.8335 455.6055 c211.8335 455.5215 211.7485 455.478 211.6641 455.478 c211.5151 455.478 211.3877 455.4565 211.1328 455.4131 c210.5605 455.3062 210.3901 454.9468 210.3481 454.2041 c210.3062 453.5259 210.3062 452.9292 210.3062 449.6221 C210.3062 445.8848 lf*U*u227.3252 442.3213 m228.5562 445.1655 231.3999 452.5718 231.8662 454.0991 c231.9722 454.415 232.0576 454.7134 232.0576 454.9033 c232.0576 455.0752 231.9937 455.2852 231.7813 455.3916 c231.5269 455.478 231.2085 455.478 230.9751 455.478 c230.8477 455.478 230.7417 455.5 230.7417 455.6055 c230.7417 455.7314 230.8691 455.7734 231.2085 455.7734 c232.0571 455.7734 233.0337 455.7104 233.2881 455.7104 c233.4155 455.7104 234.3281 455.7734 234.9438 455.7734 c235.1768 455.7734 235.3042 455.7314 235.3042 455.6265 c235.3042 455.5215 235.2192 455.478 235.0498 455.478 c234.9009 455.478 234.4341 455.478 234.0308 455.2222 c233.7554 455.0332 233.4365 454.6714 232.8638 453.228 c232.6304 452.6348 231.5693 450.0889 230.4868 447.4756 c229.1929 444.3784 228.2373 442.085 227.7495 441.0459 c227.1553 439.7754 227.0703 439.4346 226.8579 439.4346 c226.6035 439.4346 226.4976 439.7334 226.0938 440.7515 c220.8945 453.7578 L220.4277 454.9468 220.1099 455.1802 219.3667 455.3916 c219.0488 455.478 218.688 455.478 218.5605 455.478 c218.4331 455.478 218.3911 455.5425 218.3911 455.6265 c218.3911 455.7524 218.603 455.7734 218.9424 455.7734 c219.9614 455.7734 221.1704 455.7104 221.4258 455.7104 c221.6377 455.7104 222.5923 455.7734 223.3994 455.7734 c223.7808 455.7734 223.9717 455.7314 223.9717 455.6265 c223.9717 455.5215 223.9082 455.478 223.7598 455.478 c223.5269 455.478 223.144 455.4565 222.9536 455.3701 c222.7197 455.2642 222.6777 455.0962 222.6777 454.9468 c222.6777 454.6714 222.9321 454.0142 223.2505 453.1855 C227.3252 442.3213 lf*U*u243.3262 449.6221 m243.3262 452.9292 243.3262 453.5259 243.2842 454.2041 c243.2407 454.9248 243.0703 455.2642 242.3706 455.4131 c242.2007 455.4565 241.8408 455.478 241.6494 455.478 c241.564 455.478 241.48 455.5215 241.48 455.6055 c241.48 455.7314 241.585 455.7734 241.8198 455.7734 c242.7744 455.7734 244.1113 455.7104 244.2163 455.7104 c244.3652 455.7104 248.5884 455.7104 249.0767 455.7314 c249.4805 455.7524 249.8203 455.7944 249.9897 455.8364 c250.0947 455.8579 250.1807 455.9443 250.2861 455.9443 c250.3501 455.9443 250.3711 455.8579 250.3711 455.7524 c250.3711 455.6055 250.2646 455.3486 250.2017 454.7554 c250.1807 454.5449 250.1382 453.6108 250.0947 453.354 c250.0737 453.249 250.0317 453.1226 249.9463 453.1226 c249.8203 453.1226 249.7769 453.228 249.7769 453.396 c249.7769 453.5479 249.7559 453.9058 249.6504 454.1621 c249.5015 454.502 249.2886 454.7554 248.1421 454.8818 c247.7822 454.9248 245.4692 454.9468 245.2363 454.9468 c245.1504 454.9468 245.1084 454.8818 245.1084 454.7344 c245.1084 448.877 L245.1084 448.7295 245.1294 448.6665 245.2363 448.6665 c245.5112 448.6665 248.1211 448.6665 248.6094 448.7085 c249.1187 448.7505 249.416 448.7925 249.6064 449.0029 c249.7559 449.1758 249.8413 449.2808 249.9253 449.2808 c249.9897 449.2808 250.0317 449.2388 250.0317 449.1128 c250.0317 448.9819 249.9253 448.6245 249.8623 447.9214 c249.8203 447.4966 249.7769 446.7144 249.7769 446.562 c249.7769 446.394 249.7769 446.1631 249.6279 446.1631 c249.5225 446.1631 249.4805 446.2471 249.4805 446.3521 c249.4805 446.562 249.4805 446.7773 249.395 447.0503 c249.3105 447.3491 249.1187 447.7114 248.2915 447.7954 c247.7192 447.8584 245.6177 447.9004 245.2573 447.9004 c245.1504 447.9004 245.1084 447.8374 245.1084 447.7534 c245.1084 445.8848 L245.1084 445.1655 245.0874 442.7041 245.1084 442.2578 c245.1714 440.7935 245.4902 440.5156 247.5703 440.5156 c248.1211 440.5156 249.0557 440.5156 249.6064 440.7515 c250.1597 440.9829 250.4136 441.4077 250.562 442.2788 c250.6045 442.5103 250.6479 442.5942 250.7529 442.5942 c250.8804 442.5942 250.8804 442.4263 250.8804 442.2788 c250.8804 442.106 250.7109 440.6626 250.6045 440.2188 c250.4561 439.6655 250.2861 439.6655 249.458 439.6655 c246.2549 439.6655 244.8325 439.7964 244.2163 439.7964 c244.1113 439.7964 242.7744 439.7334 242.1377 439.7334 c241.9038 439.7334 241.7983 439.7754 241.7983 439.9014 c241.7983 439.9644 241.8408 440.0273 241.9683 440.0273 c242.1587 440.0273 242.4126 440.0693 242.6045 440.1113 c243.0283 440.1958 243.1348 440.6626 243.2192 441.2817 c243.3262 442.1689 243.3262 443.8486 243.3262 445.8848 C243.3262 449.6221 lf*U*u261.1309 449.6221 m261.1309 452.9292 261.1309 453.5259 261.0884 454.2041 c261.0459 454.9248 260.8755 455.2642 260.1753 455.4131 c260.0059 455.4565 259.645 455.478 259.4536 455.478 c259.3687 455.478 259.2837 455.5215 259.2837 455.6055 c259.2837 455.7314 259.3896 455.7734 259.624 455.7734 c260.5786 455.7734 261.9155 455.7104 262.0215 455.7104 c262.2549 455.7104 263.8677 455.7734 264.5259 455.7734 c265.8623 455.7734 267.2847 455.6475 268.4097 454.8394 c268.9404 454.4585 269.874 453.4175 269.874 451.9531 c269.874 450.3833 269.2158 448.8135 267.3057 447.0503 c269.0459 444.8247 270.4893 442.9351 271.7197 441.6182 c272.8662 440.4106 273.7783 440.1748 274.3091 440.0903 c274.7114 440.0273 275.0088 440.0273 275.1367 440.0273 c275.2427 440.0273 275.3276 439.9644 275.3276 439.9014 c275.3276 439.7754 275.1997 439.7334 274.8184 439.7334 c273.3115 439.7334 L272.123 439.7334 271.5923 439.8384 271.0405 440.1323 c270.1279 440.6206 269.3857 441.6602 268.1753 443.2554 c267.2847 444.4204 266.2871 445.8428 265.8623 446.394 c265.7778 446.478 265.7139 446.52 265.5869 446.52 c262.9766 446.562 L262.8701 446.562 262.8281 446.499 262.8281 446.394 c262.8281 445.8848 L262.8281 443.8486 262.8281 442.1689 262.9341 441.2817 c262.9976 440.6626 263.1255 440.1958 263.7612 440.1113 c264.0591 440.0693 264.5259 440.0273 264.7168 440.0273 c264.8442 440.0273 264.8867 439.9644 264.8867 439.9014 c264.8867 439.7964 264.7808 439.7334 264.5469 439.7334 c263.3799 439.7334 262.043 439.7964 261.937 439.7964 c261.9155 439.7964 260.5786 439.7334 259.9419 439.7334 c259.7085 439.7334 259.6025 439.7754 259.6025 439.9014 c259.6025 439.9644 259.645 440.0273 259.772 440.0273 c259.9629 440.0273 260.2173 440.0693 260.4087 440.1113 c260.833 440.1958 260.939 440.6626 261.0244 441.2817 c261.1309 442.1689 261.1309 443.8486 261.1309 445.8848 C261.1309 449.6221 lf1 D262.8281 447.7744 m262.8281 447.6694 262.8701 447.583 262.9766 447.5176 c263.2949 447.3281 264.271 447.1812 265.2046 447.1812 c265.7139 447.1812 266.3086 447.2441 266.7969 447.583 c267.5396 448.0928 268.0908 449.2388 268.0908 450.8501 c268.0908 453.5044 266.6899 455.0962 264.4194 455.0962 c263.7827 455.0962 263.21 455.0332 262.9976 454.9683 c262.8916 454.9248 262.8281 454.8394 262.8281 454.7134 C262.8281 447.7744 lf*U*u0 D280.4258 440.0063 m280.1289 440.1533 280.1069 440.2427 280.1069 440.8145 c280.1069 441.875 280.1919 442.7251 280.2129 443.0615 c280.2349 443.2974 280.2769 443.4023 280.3828 443.4023 c280.5103 443.4023 280.5322 443.3394 280.5322 443.1694 c280.5322 442.9771 280.5322 442.6816 280.5952 442.3843 c280.9136 440.8145 282.3145 440.2188 283.7358 440.2188 c285.7734 440.2188 286.7705 441.6812 286.7705 443.04 c286.7705 444.5049 286.1553 445.355 284.3301 446.8613 c283.376 447.6484 L281.126 449.4907 280.6162 450.8081 280.6162 452.2515 c280.6162 454.5234 282.3145 456.0723 285.0093 456.0723 c285.8374 456.0723 286.4526 455.9873 286.9829 455.8579 c287.3862 455.7734 287.5557 455.7524 287.7261 455.7524 c287.8955 455.7524 287.938 455.7104 287.938 455.6055 c287.938 455.5 287.853 454.7974 287.853 453.354 c287.853 453.0161 287.811 452.8657 287.7046 452.8657 c287.5767 452.8657 287.5557 452.9727 287.5347 453.1436 c287.5137 453.396 287.3862 453.9707 287.2588 454.2041 c287.1318 454.437 286.5586 455.3271 284.606 455.3271 c283.1416 455.3271 281.9961 454.415 281.9961 452.8657 c281.9961 451.6582 282.5903 450.9341 284.585 449.3018 c285.1792 448.835 L287.6831 446.8613 288.2773 445.5439 288.2773 443.8486 c288.2773 442.9771 287.938 441.3657 286.4736 440.3267 c285.5615 439.6865 284.415 439.4346 283.269 439.4346 c282.2715 439.4346 281.2954 439.5815 280.4258 440.0063 cf*U*u300.5225 445.8848 m300.5225 443.8486 300.5225 442.1689 300.6284 441.2817 c300.6919 440.6626 300.8188 440.1958 301.4561 440.1113 c301.7529 440.0693 302.2197 440.0273 302.4106 440.0273 c302.5386 440.0273 302.5806 439.9644 302.5806 439.9014 c302.5806 439.7964 302.4746 439.7334 302.2407 439.7334 c301.0742 439.7334 299.7368 439.7964 299.6309 439.7964 c299.5249 439.7964 298.188 439.7334 297.5513 439.7334 c297.3179 439.7334 297.2114 439.7754 297.2114 439.9014 c297.2114 439.9644 297.2539 440.0273 297.3813 440.0273 c297.5728 440.0273 297.8267 440.0693 298.0181 440.1113 c298.4419 440.1958 298.5488 440.6626 298.6333 441.2817 c298.7393 442.1689 298.7393 443.8486 298.7393 445.8848 c298.7393 449.6221 L298.7393 452.9292 298.7393 453.5259 298.6968 454.2041 c298.6543 454.9248 298.4419 455.2852 297.9751 455.3916 c297.7417 455.4565 297.4658 455.478 297.3179 455.478 c297.2324 455.478 297.1479 455.5215 297.1479 455.6055 c297.1479 455.7314 297.2539 455.7734 297.4878 455.7734 c298.188 455.7734 299.5249 455.7104 299.6309 455.7104 c299.7368 455.7104 301.0742 455.7734 301.7109 455.7734 c301.9443 455.7734 302.0503 455.7314 302.0503 455.6055 c302.0503 455.5215 301.9653 455.478 301.8804 455.478 c301.7319 455.478 301.6045 455.4565 301.3496 455.4131 c300.7764 455.3062 300.6069 454.9468 300.5649 454.2041 c300.5225 453.5259 300.5225 452.9292 300.5225 449.6221 C300.5225 445.8848 lf*U*u317.4561 445.8848 m317.4561 443.8486 317.4561 442.1689 317.563 441.2817 c317.6265 440.6626 317.7534 440.1958 318.3901 440.1113 c318.6865 440.0693 319.1538 440.0273 319.3452 440.0273 c319.4727 440.0273 319.5156 439.9644 319.5156 439.9014 c319.5156 439.7964 319.4082 439.7334 319.1748 439.7334 c318.0078 439.7334 316.6714 439.7964 316.5649 439.7964 c316.4585 439.7964 315.1221 439.7334 314.4854 439.7334 c314.2515 439.7334 314.146 439.7754 314.146 439.9014 c314.146 439.9644 314.1885 440.0273 314.3154 440.0273 c314.5063 440.0273 314.7612 440.0693 314.9521 440.1113 c315.3774 440.1958 315.4824 440.6626 315.5679 441.2817 c315.6738 442.1689 315.6738 443.8486 315.6738 445.8848 c315.6738 454.8604 L312.5327 454.8184 L311.2178 454.7974 310.708 454.6504 310.3687 454.1411 c310.1353 453.7788 310.0713 453.6318 310.0078 453.4824 c309.9443 453.312 309.8804 453.27 309.7954 453.27 c309.7319 453.27 309.6895 453.333 309.6895 453.4609 c309.6895 453.6738 310.1138 455.5 310.1563 455.6685 c310.1987 455.7944 310.2837 456.0723 310.3687 456.0723 c310.5171 456.0723 310.73 455.8579 311.3022 455.8154 c311.918 455.7524 312.7241 455.7104 312.979 455.7104 c320.9365 455.7104 L322.2949 455.7104 322.8672 455.9224 323.0376 455.9224 c323.1436 455.9224 323.1436 455.7944 323.1436 455.6685 c323.1436 455.0332 323.0801 453.5688 323.0801 453.333 c323.0801 453.1436 323.0166 453.0596 322.9316 453.0596 c322.8252 453.0596 322.7832 453.1226 322.7622 453.4175 c322.7412 453.6528 L322.6553 454.2881 322.1675 454.7764 320.1299 454.8184 c317.4561 454.8604 L317.4561 445.8848 lf*U*u335.2822 445.2285 m335.2822 446.373 335.0698 446.8403 334.7939 447.4546 c334.6445 447.7954 331.8022 452.4634 331.0596 453.5688 c330.5273 454.3511 329.9971 454.8818 329.6162 455.1382 c329.2964 455.3486 328.8945 455.478 328.7031 455.478 c328.5981 455.478 328.4907 455.5215 328.4907 455.6265 c328.4907 455.7104 328.5771 455.7734 328.7661 455.7734 c329.1704 455.7734 330.7607 455.7104 330.8682 455.7104 c331.0156 455.7104 331.8232 455.7734 332.6499 455.7734 c332.8838 455.7734 332.9258 455.7104 332.9258 455.6265 c332.9258 455.5425 332.7998 455.5215 332.6079 455.4351 c332.4375 455.3486 332.3325 455.2222 332.3325 455.0542 c332.3325 454.7974 332.4375 454.5449 332.6079 454.2251 c332.9468 453.6108 336.1299 448.1367 336.5132 447.5176 c336.9155 448.4097 339.6113 453.0596 340.0352 453.7578 c340.311 454.2041 340.3965 454.5659 340.3965 454.8394 c340.3965 455.1382 340.311 455.3701 340.0566 455.4351 c339.8657 455.5 339.7383 455.5425 339.7383 455.6475 c339.7383 455.7314 339.8657 455.7734 340.0781 455.7734 c340.6299 455.7734 341.3081 455.7104 341.4785 455.7104 c341.6064 455.7104 343.1343 455.7734 343.5376 455.7734 c343.6855 455.7734 343.813 455.7314 343.813 455.6475 c343.813 455.5425 343.7065 455.478 343.5376 455.478 c343.3032 455.478 342.9009 455.3916 342.561 455.1802 c342.1372 454.9248 341.9033 454.6714 341.4365 454.0991 c340.7358 453.249 337.7651 448.2627 337.3823 447.3491 c337.0645 446.584 337.0645 445.9268 337.0645 445.2285 c337.0645 443.4023 L337.0645 443.0615 337.0645 442.1689 337.1279 441.2817 c337.1714 440.6626 337.3608 440.1958 337.9985 440.1113 c338.2949 440.0693 338.7622 440.0273 338.9536 440.0273 c339.0801 440.0273 339.123 439.9644 339.123 439.9014 c339.123 439.7964 339.0166 439.7334 338.7832 439.7334 c337.6157 439.7334 336.2793 439.7964 336.1729 439.7964 c336.0669 439.7964 334.731 439.7334 334.0933 439.7334 c333.8599 439.7334 333.7549 439.7754 333.7549 439.9014 c333.7549 439.9644 333.7969 440.0273 333.9229 440.0273 c334.1143 440.0273 334.3691 440.0693 334.5605 440.1113 c334.9858 440.1958 335.1753 440.6626 335.2192 441.2817 c335.2822 442.1689 335.2822 443.0615 335.2822 443.4023 C335.2822 445.2285 lf*U*u369.3633 456.0723 m374.1377 456.0723 377.7036 453.0596 377.7036 448.1147 c377.7036 443.3604 374.3506 439.4346 369.2363 439.4346 c363.4214 439.4346 361.002 443.9536 361.002 447.7744 c361.002 451.2124 363.5059 456.0723 369.3633 456.0723 cf1 D369.8091 440.2427 m371.7192 440.2427 375.6665 441.3447 375.6665 447.5176 c375.6665 452.6138 372.5674 455.3486 369.2153 455.3486 c365.6709 455.3486 363.0176 453.0161 363.0176 448.3677 c363.0176 443.4233 365.9893 440.2427 369.8091 440.2427 cf*U*u0 D386.499 449.6221 m386.499 452.9292 386.499 453.5259 386.4565 454.2041 c386.4146 454.9248 386.2446 455.2642 385.5439 455.4131 c385.3745 455.4565 385.0137 455.478 384.8228 455.478 c384.7378 455.478 384.6528 455.5215 384.6528 455.6055 c384.6528 455.7314 384.7593 455.7734 384.9927 455.7734 c385.9478 455.7734 387.2847 455.7104 387.3911 455.7104 c387.8149 455.7104 392.123 455.7104 392.6113 455.7314 c393.0137 455.7524 393.354 455.7524 393.5444 455.8154 c393.6719 455.8579 393.7568 455.9443 393.8423 455.9443 c393.9268 455.9443 393.9692 455.8579 393.9692 455.7524 c393.9692 455.6055 393.8633 455.3486 393.7998 454.7554 c393.7783 454.5449 393.7354 453.6108 393.6929 453.354 c393.6719 453.249 393.6294 453.1226 393.5234 453.1226 c393.4175 453.1226 393.375 453.228 393.375 453.375 c393.375 453.5479 393.3115 453.9058 393.1841 454.1831 c393.0562 454.4585 392.5684 454.8394 391.7412 454.8604 c388.4727 454.9248 L388.3452 454.9248 388.2817 454.8604 388.2817 454.6924 c388.2817 448.835 L388.2817 448.7085 388.3027 448.6455 388.4307 448.6455 c391.147 448.6665 L391.5073 448.6665 391.8052 448.6665 392.1016 448.6875 c392.6113 448.7295 392.8867 448.7925 393.0776 449.0688 c393.1631 449.1758 393.2266 449.2808 393.3115 449.2808 c393.3965 449.2808 393.4175 449.2178 393.4175 449.1128 c393.4175 448.9819 393.3115 448.6245 393.2476 447.9214 c393.2051 447.4966 393.1631 446.6509 393.1631 446.499 c393.1631 446.3101 393.1631 446.0967 393.0137 446.0967 c392.9082 446.0967 392.8657 446.1841 392.8657 446.2891 c392.8447 446.499 392.8232 446.7983 392.7383 447.0503 c392.6323 447.3491 392.2925 447.7324 391.6348 447.8164 c391.104 447.8794 388.791 447.8794 388.4307 447.8794 c388.3242 447.8794 388.2817 447.8374 388.2817 447.6904 c388.2817 445.8848 L388.2817 443.8486 388.2817 442.1689 388.3882 441.2817 c388.4517 440.6626 388.5786 440.1958 389.2153 440.1113 c389.5127 440.0693 389.9795 440.0273 390.1709 440.0273 c390.2979 440.0273 390.3408 439.9644 390.3408 439.9014 c390.3408 439.7964 390.2339 439.7334 390.0005 439.7334 c388.833 439.7334 387.4966 439.7964 387.3911 439.7964 c387.2842 439.7964 385.9478 439.7334 385.311 439.7334 c385.0771 439.7334 384.9712 439.7754 384.9712 439.9014 c384.9712 439.9644 385.0137 440.0273 385.1411 440.0273 c385.332 440.0273 385.5864 440.0693 385.7778 440.1113 c386.2021 440.1958 386.3081 440.6626 386.3931 441.2817 c386.499 442.1689 386.499 443.8486 386.499 445.8848 C386.499 449.6221 lf*UUu344.5195 414.2061 m344.5195 415.9331 344.3735 417.5181 344.3735 419.105 c344.3735 420.833 344.5195 422.5659 344.5195 424.1504 c341.4912 424.875 338.1753 425.1597 335.0039 425.1597 c323.0391 425.1597 313.3799 415.3569 313.3799 403.6807 c313.3799 391.7114 323.6157 384.6484 334.8589 384.6484 c338.1753 384.6484 341.4912 385.2266 344.9526 386.0903 c344.9526 387.6792 344.8076 389.2583 344.8076 390.9971 c344.8076 392.5781 344.9526 394.1646 344.9526 395.7476 c341.3472 388.542 l338.751 387.3877 336.8813 386.9517 334.1411 386.9517 c327.5093 386.9517 319.5796 391.2793 319.5796 404.9751 c319.5796 417.2305 325.9219 422.7109 334.1411 422.7109 c336.5928 422.7109 338.6089 422.2754 341.2046 421.1221 c344.5195 414.2061 lf83.8579 424.4395 m86.1631 423.7197 87.6055 423.1411 88.3291 422.4214 c88.9048 422.1304 89.3374 421.1221 90.2012 418.5308 c93.5195 407.4287 97.2681 395.4614 100.2935 384.6484 c101.8833 384.6484 l105.0518 394.7397 109.5205 404.8296 113.5581 414.7798 c117.4512 404.6899 121.7754 394.5967 125.0913 384.6484 c126.6768 384.6484 l128.1191 389.2583 132.4443 402.5273 138.3564 417.6631 c139.7954 421.1221 140.5186 423.4282 143.5435 424.4395 c141.3828 424.1504 139.3638 423.8638 137.2007 423.8638 c132.1558 410.4551 128.2627 399.0659 126.9658 394.7397 c122.9263 404.8296 119.1807 414.9233 115.5762 425.1597 c114.4229 425.1597 l110.9639 415.2148 106.7817 405.2651 102.7446 395.4614 c100.1484 404.6899 96.9775 414.4917 94.0923 423.8638 c91.21 423.8638 86.7407 424.1504 83.8579 424.4395 cf223.418 424.4395 m225.5796 423.7197 227.02 423.1411 227.8828 422.4214 c228.3179 422.1304 228.8931 421.1221 229.6157 418.5308 c232.9321 407.4287 236.8232 395.4614 239.708 384.6484 c241.4365 384.6484 l244.6094 394.7397 249.0801 404.8296 252.9717 414.7798 c256.8618 404.6899 261.189 394.5967 264.5044 384.6484 c266.2354 384.6484 l267.5332 389.2583 272.0015 402.5273 277.9141 417.6631 c279.21 421.1221 280.0757 423.4282 282.958 424.4395 c280.7959 424.1504 278.9214 423.8638 276.7578 423.8638 c271.5674 410.4551 267.6768 399.0659 266.521 394.7397 c262.4878 404.8296 258.7388 414.9233 255.1328 425.1597 c253.8359 425.1597 l250.5176 415.2148 246.3384 405.2651 242.3032 395.4614 c239.708 404.6899 236.5366 414.4917 233.5063 423.8638 c230.7695 423.8638 226.2998 424.1504 223.418 424.4395 cf306.8901 385.3687 m302.2759 386.9517 l300.6924 387.5347 300.5454 387.8218 300.5454 392.4351 c300.4019 396.0381 300.2583 400.646 300.2583 404.2568 c300.2583 407.8618 300.4019 412.3271 300.5454 416.0786 c300.5454 421.7017 300.6924 422.1304 301.8452 422.5659 c306.8901 424.2939 l303.8643 424.0063 300.9829 423.8638 297.8076 423.8638 c294.4897 423.8638 291.4648 424.0063 288.582 424.2939 c293.6289 422.5659 l294.7813 422.1304 294.9258 421.7017 295.0693 416.0786 c295.0693 412.3271 295.2129 407.8618 295.2129 404.2568 c295.2129 400.646 295.0693 396.0381 295.0693 392.4351 c294.9258 387.8218 294.7813 387.5347 293.1924 386.9517 c288.582 385.3687 l291.3193 385.6602 294.7813 385.7988 297.8076 385.7988 c300.5454 385.7988 304.0078 385.6602 306.8901 385.3687 cf395.1216 385.3687 m394.2603 385.6602 392.8198 386.2334 392.5259 386.3774 c392.3818 386.5254 391.3774 387.2422 391.0918 387.6792 c372.0566 407.8618 l387.6304 421.4146 l389.0713 422.8521 391.6641 423.8638 393.1055 424.4395 c390.8032 424.1504 387.3403 423.8638 385.1758 423.8638 c380.4155 418.8154 379.2661 417.6631 v366.4326 405.9849 l385.0273 385.7988 l388.0625 385.7988 392.2397 385.6602 395.1216 385.3687 cf353.1743 385.3687 m355.9106 385.6602 362.252 385.9429 365.2808 385.9429 c365.1377 391.7114 l365.1377 392.1431 365.1377 392.7202 365.1377 393.2964 c364.9883 396.9033 364.8472 400.646 364.8472 404.2568 c364.8472 407.8618 364.9883 411.6084 365.1377 415.2148 c365.1377 416.6528 365.1377 417.8066 365.1377 418.6724 c365.2808 423.8638 l361.9653 423.8638 356.0508 424.1504 353.1743 424.4395 c358.2163 422.7109 l359.3672 422.2754 359.5171 421.8433 359.6577 416.0786 c359.6577 412.4717 359.8037 407.8618 359.8037 404.2568 c359.8037 400.646 359.6577 396.1841 359.6577 392.4351 c359.5171 387.8218 359.3672 387.5347 357.7842 386.9517 c353.1743 385.3687 lf*u1 D181.0381 385.3687 m176.2803 386.9517 l171.0913 399.3564 165.3237 412.9072 160.4233 425.5928 c159.1245 425.5928 l158.8359 424.875 158.5469 424.0063 158.1157 422.9966 c158.1157 416.3682 l158.2593 416.7988 l164.8926 400.646 l158.1157 400.646 l158.1157 398.3467 l160.7124 398.3467 163.3057 398.1992 165.7568 398.1992 c167.4868 394.0225 169.3608 389.9814 171.0913 385.7988 c174.2612 385.7988 177.8672 385.6602 181.0381 385.3687 cf158.1157 422.9966 m153.646 412.3271 147.4473 398.7759 142.4004 387.2422 c141.3916 386.6689 139.3735 385.7988 138.2192 385.3687 c140.5283 385.6602 142.833 385.7988 144.9946 385.7988 c146.7266 389.8389 148.6025 394.1646 150.3296 398.1992 c152.9272 398.1992 155.52 398.3467 157.9707 398.3467 c158.1157 398.3467 158.1157 398.3467 y158.1157 400.646 l151.1934 400.646 l158.1157 416.3682 l158.1157 422.9966 lf*U*u207.4072 405.1191 m213.0269 405.9849 217.3511 408.8701 217.3511 415.0693 c217.3511 421.1221 212.1621 424.4395 204.2319 424.4395 c204.2319 424.4395 204.0879 424.4395 v204.0879 421.8433 l208.7002 421.4146 211.584 418.9604 211.584 414.2061 c211.584 409.0142 208.4116 407.4287 204.0879 406.9917 c204.0879 398.9224 l211.4399 383.9258 225.7129 370.519 244.4551 367.0601 c264.6382 363.3135 280.4985 367.7773 294.3389 380.1831 c281.9404 371.8203 264.9282 366.9155 247.1953 370.0845 c218.2168 375.1313 207.4072 405.1191 yf204.0879 424.4395 m199.9058 424.4395 196.4473 423.8638 193.2764 423.8638 c189.9585 423.8638 187.0752 424.1504 184.7705 424.4395 c189.9585 422.7109 l191.2559 422.2754 191.4009 421.5586 191.4009 415.7886 c191.4009 393.2964 l191.4009 388.687 191.2559 387.5347 189.5269 386.9517 c184.7705 385.3687 l187.7988 385.6602 193.4189 385.9429 196.5898 385.9429 c196.5898 404.6899 l201.6377 404.5449 l201.7793 404.3999 201.7793 404.2568 v202.5015 402.5273 203.2222 400.646 204.0879 398.9224 c204.0879 406.9917 l203.0796 406.854 201.9258 406.7095 200.6294 406.7095 c196.5898 406.7095 l196.5898 421.8433 l198.3203 421.8433 200.1938 421.8433 202.2139 421.8433 c202.9326 421.8433 203.5107 421.8433 204.0879 421.8433 c204.0879 424.4395 lf*UU1 Ap0 D434 345.667 m43 345.667 L43 496.667 L434 496.667 L434 345.667 LnLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
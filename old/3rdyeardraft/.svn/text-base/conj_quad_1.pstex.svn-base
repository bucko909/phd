%!PS-Adobe-2.0 EPSF-2.0
%%Title: conj_quad_1.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5
%%CreationDate: Sun Jan 13 17:56:33 2008
%%For: bucko@tank (David Buckley,,,)
%%BoundingBox: 0 0 358 141
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 141 moveto 0 0 lineto 358 0 lineto 358 141 lineto closepath clip newpath
0.9 140.7 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 179 217 45 45 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 8.93 11.47] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 5039 127 45 45 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 332.93 5.47] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 5219 1657 45 45 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 344.93 107.47] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 4895 1118 23 23 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 324.80 73.00] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 4555 1591 23 23 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 302.13 104.53] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 635 1392 23 23 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 40.80 91.27] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 1046 1771 23 23 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 68.20 116.53] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 359 1927 45 45 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 20.93 125.47] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 4207 2203 23 23 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 278.93 145.33] PATmp PATsp ef gr PATusp gs col0 s gr

% Polyline
0 slj
0 slc
n 2474 622 m 2429 667 l
 2474 712 l gs col0 s gr 
% Polyline
n 4808 891 m 4853 846 l
 4898 891 l gs col0 s gr 
% Polyline
n 2835 1517 m 2790 1562 l
 2835 1607 l gs col0 s gr 
% Polyline
n 3105 1176 m 3060 1221 l
 3105 1266 l gs col0 s gr 
% Polyline
n 585 1339 m 630 1294 l
 675 1339 l gs col0 s gr 
% Polyline
2 slj
n 179 217 m 180 217 l 181 218 l 184 219 l 188 221 l 194 223 l
 202 227 l 212 231 l 225 236 l 241 243 l 259 250 l
 280 259 l 304 269 l 331 279 l 360 291 l 392 303 l
 427 316 l 464 330 l 503 345 l 544 360 l 587 375 l
 632 391 l 679 406 l 727 422 l 777 438 l 829 454 l
 882 470 l 936 485 l 992 500 l 1049 515 l 1108 530 l
 1169 544 l 1231 558 l 1295 571 l 1362 583 l 1431 595 l
 1502 607 l 1576 617 l 1652 627 l 1732 636 l 1815 644 l
 1900 651 l 1989 657 l 2081 662 l 2176 665 l 2274 667 l
 2373 668 l 2474 667 l 2571 664 l 2668 660 l 2764 655 l
 2858 648 l 2950 641 l 3040 632 l 3128 622 l 3213 612 l
 3296 600 l 3376 588 l 3454 576 l 3530 563 l 3604 549 l
 3676 534 l 3746 520 l 3815 505 l 3882 489 l 3948 473 l
 4012 457 l 4076 440 l 4137 423 l 4198 406 l 4258 389 l
 4316 372 l 4372 355 l 4428 338 l 4482 321 l 4534 304 l
 4584 287 l 4632 271 l 4678 256 l 4722 241 l 4763 227 l
 4802 213 l 4838 200 l 4870 189 l 4900 178 l 4927 169 l
 4950 160 l 4971 152 l 4988 146 l 5002 141 l 5014 136 l
 5023 133 l 5029 131 l 5034 129 l 5037 128 l 5038 127 l

 5039 127 l gs col0 s gr 
% Polyline
n 179 217 m 180 218 l 181 220 l 184 224 l 188 231 l 193 240 l
 201 253 l 210 268 l 221 287 l 234 308 l 248 333 l
 265 360 l 282 390 l 300 423 l 319 457 l 339 492 l
 359 529 l 379 567 l 399 606 l 420 646 l 439 687 l
 459 728 l 478 770 l 496 813 l 514 857 l 531 902 l
 548 948 l 563 995 l 578 1043 l 591 1093 l 603 1143 l
 614 1195 l 623 1246 l 629 1297 l 634 1357 l 635 1413 l
 633 1465 l 629 1513 l 622 1556 l 613 1595 l 602 1631 l
 590 1664 l 576 1694 l 561 1721 l 545 1747 l 529 1770 l
 512 1792 l 494 1812 l 476 1830 l 459 1847 l 442 1862 l
 426 1876 l 411 1888 l 398 1899 l 387 1907 l 378 1914 l
 370 1919 l 365 1923 l 362 1925 l 360 1926 l
 359 1927 l gs col0 s gr 
% Polyline
n 359 1927 m 360 1927 l 361 1926 l 364 1926 l 368 1925 l 374 1923 l
 383 1921 l 394 1918 l 407 1915 l 423 1911 l 442 1906 l
 464 1901 l 489 1895 l 517 1888 l 547 1881 l 580 1873 l
 616 1864 l 654 1855 l 695 1846 l 738 1836 l 782 1826 l
 829 1816 l 877 1805 l 927 1795 l 979 1784 l 1032 1773 l
 1086 1762 l 1142 1752 l 1199 1741 l 1258 1730 l 1318 1720 l
 1380 1709 l 1444 1699 l 1510 1688 l 1577 1678 l 1647 1668 l
 1720 1658 l 1795 1648 l 1872 1639 l 1953 1629 l 2036 1620 l
 2123 1611 l 2213 1603 l 2305 1595 l 2401 1587 l 2498 1580 l
 2598 1573 l 2699 1567 l 2796 1562 l 2893 1558 l 2988 1554 l
 3082 1551 l 3174 1549 l 3263 1547 l 3350 1546 l 3434 1546 l
 3516 1546 l 3595 1546 l 3672 1547 l 3747 1548 l 3820 1550 l
 3891 1552 l 3960 1555 l 4028 1557 l 4093 1561 l 4158 1564 l
 4221 1567 l 4283 1571 l 4343 1575 l 4402 1579 l 4460 1583 l
 4517 1588 l 4572 1592 l 4626 1597 l 4678 1601 l 4729 1606 l
 4778 1611 l 4825 1615 l 4869 1619 l 4912 1624 l 4952 1628 l
 4989 1632 l 5024 1635 l 5056 1639 l 5085 1642 l 5110 1645 l
 5133 1647 l 5153 1649 l 5170 1651 l 5183 1653 l 5195 1654 l
 5203 1655 l 5210 1656 l 5214 1656 l 5217 1657 l 5218 1657 l

 5219 1657 l gs col0 s gr 
% Polyline
n 5219 1657 m 5218 1656 l 5216 1654 l 5213 1650 l 5208 1644 l 5200 1636 l
 5191 1625 l 5179 1612 l 5166 1596 l 5150 1578 l 5134 1558 l
 5116 1535 l 5097 1511 l 5078 1485 l 5059 1458 l 5040 1430 l
 5021 1400 l 5002 1369 l 4983 1336 l 4966 1302 l 4948 1265 l
 4932 1226 l 4916 1185 l 4902 1141 l 4889 1094 l 4877 1044 l
 4867 991 l 4859 937 l 4854 882 l 4851 829 l 4851 777 l
 4853 727 l 4857 680 l 4863 635 l 4869 592 l 4877 552 l
 4887 513 l 4897 475 l 4908 439 l 4919 404 l 4931 370 l
 4943 338 l 4956 307 l 4968 278 l 4980 250 l 4991 225 l
 5002 203 l 5011 183 l 5019 167 l 5026 153 l 5031 143 l
 5035 135 l 5037 131 l 5038 128 l
 5039 127 l gs col0 s gr 
% Polyline
n 5264 1657 m 5263 1657 l 5262 1656 l 5259 1655 l 5255 1654 l 5248 1652 l
 5240 1650 l 5229 1646 l 5215 1642 l 5200 1638 l 5181 1632 l
 5161 1626 l 5137 1619 l 5112 1612 l 5084 1604 l 5055 1596 l
 5023 1587 l 4990 1578 l 4954 1569 l 4917 1559 l 4878 1549 l
 4837 1538 l 4793 1528 l 4748 1516 l 4699 1505 l 4648 1493 l
 4593 1480 l 4535 1468 l 4473 1454 l 4407 1440 l 4336 1425 l
 4261 1409 l 4181 1393 l 4096 1377 l 4006 1359 l 3914 1342 l
 3837 1328 l 3760 1314 l 3684 1300 l 3611 1288 l 3540 1276 l
 3474 1265 l 3412 1256 l 3354 1248 l 3300 1241 l 3252 1235 l
 3208 1230 l 3168 1226 l 3132 1223 l 3100 1221 l 3071 1220 l
 3046 1219 l 3023 1220 l 3002 1220 l 2983 1221 l 2965 1223 l
 2948 1224 l 2931 1226 l 2915 1227 l 2898 1229 l 2880 1229 l
 2860 1230 l 2839 1230 l 2815 1229 l 2789 1227 l 2759 1225 l
 2726 1221 l 2688 1216 l 2647 1210 l 2600 1202 l 2549 1193 l
 2493 1181 l 2432 1168 l 2366 1154 l 2295 1137 l 2219 1118 l
 2140 1098 l 2058 1076 l 1974 1052 l 1889 1027 l 1801 1000 l
 1714 972 l 1630 943 l 1548 915 l 1470 886 l 1395 858 l
 1324 830 l 1255 802 l 1190 775 l 1127 747 l 1068 721 l
 1010 694 l 955 668 l 902 642 l 851 616 l 801 590 l
 753 565 l 707 539 l 662 515 l 619 490 l 577 466 l
 537 442 l 498 419 l 461 397 l 426 375 l 393 355 l
 362 336 l 333 317 l 307 301 l 283 285 l 262 271 l
 243 259 l 227 249 l 214 240 l 203 233 l 194 227 l
 188 223 l 184 220 l 181 218 l 180 217 l
 179 217 l gs col0 s gr 
% Polyline
n 4897 1114 m 4896 1116 l 4895 1120 l 4893 1127 l 4890 1136 l 4885 1149 l
 4880 1164 l 4873 1180 l 4866 1197 l 4857 1215 l 4848 1234 l
 4836 1254 l 4823 1275 l 4808 1296 l 4790 1319 l 4769 1342 l
 4744 1366 l 4720 1388 l 4697 1405 l 4675 1419 l 4654 1432 l
 4635 1442 l 4616 1451 l 4599 1458 l 4583 1464 l 4571 1469 l
 4562 1472 l 4557 1474 l
 4554 1475 l gs col0 s gr 
% Polyline
n 4557 1474 m 4560 1477 l 4564 1482 l 4570 1489 l 4577 1498 l 4582 1508 l
 4586 1520 l 4587 1534 l 4585 1548 l 4581 1559 l 4575 1569 l
 4568 1577 l 4562 1584 l 4557 1588 l
 4554 1591 l gs col0 s gr 
% Polyline
n 636 1391 m 637 1393 l 638 1399 l 641 1408 l 644 1421 l 650 1437 l
 656 1456 l 663 1478 l 672 1500 l 682 1523 l 693 1546 l
 706 1570 l 722 1595 l 741 1620 l 762 1645 l 787 1670 l
 813 1692 l 839 1710 l 864 1725 l 888 1737 l 911 1746 l
 932 1753 l 953 1758 l 973 1762 l 992 1765 l 1009 1767 l
 1023 1768 l 1034 1769 l 1042 1770 l 1047 1770 l
 1049 1770 l gs col0 s gr 
% Polyline
n 4553 1595 m 4552 1596 l 4548 1598 l 4543 1601 l 4535 1607 l 4526 1614 l
 4514 1623 l 4501 1633 l 4487 1646 l 4472 1660 l 4456 1676 l
 4440 1695 l 4422 1718 l 4402 1745 l 4382 1777 l 4360 1814 l
 4343 1845 l 4327 1877 l 4313 1907 l 4300 1937 l 4288 1965 l
 4277 1992 l 4267 2019 l 4258 2044 l 4249 2069 l 4241 2093 l
 4234 2116 l 4228 2137 l 4222 2156 l 4217 2173 l 4213 2186 l
 4210 2196 l 4209 2203 l 4207 2206 l
 4207 2208 l gs col0 s gr 
/Times-Roman ff 190.50 scf sf
5027 969 m
gs 1 -1 sc ($w_2$) col0 sh gr
/Times-Roman ff 190.50 scf sf
5293 1800 m
gs 1 -1 sc ($A$) col0 sh gr
/Times-Roman ff 190.50 scf sf
0 191 m
gs 1 -1 sc ($C$) col0 sh gr
/Times-Roman ff 190.50 scf sf
5120 150 m
gs 1 -1 sc ($D$) col0 sh gr
/Times-Roman ff 190.50 scf sf
187 2006 m
gs 1 -1 sc ($B$) col0 sh gr
/Times-Roman ff 190.50 scf sf
2388 580 m
gs 1 -1 sc ($u$) col0 sh gr
/Times-Roman ff 190.50 scf sf
3019 1127 m
gs 1 -1 sc ($t$) col0 sh gr
/Times-Roman ff 190.50 scf sf
2755 1798 m
gs 1 -1 sc ($v$) col0 sh gr
/Times-Roman ff 190.50 scf sf
714 1383 m
gs 1 -1 sc ($w_1$) col0 sh gr
/Times-Roman ff 190.50 scf sf
220 1660 m
gs 1 -1 sc ($m$) col0 sh gr
/Times-Roman ff 190.50 scf sf
4717 1133 m
gs 1 -1 sc ($y$) col0 sh gr
/Times-Roman ff 190.50 scf sf
5060 1447 m
gs 1 -1 sc ($n$) col0 sh gr
/Times-Roman ff 190.50 scf sf
4111 1914 m
gs 1 -1 sc ($\\le\\epsilon$) col0 sh gr
/Times-Roman ff 190.50 scf sf
4523 1776 m
gs 1 -1 sc ($y'$) col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
end
%EOF

%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/bucko/talk/thin_triangle.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5
%%CreationDate: Mon Apr  7 18:10:15 2008
%%For: bucko@tank (David Buckley,,,)
%%BoundingBox: 0 0 212 142
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 142 moveto 0 0 lineto 212 0 lineto 212 142 lineto closepath clip newpath
-49.7 166.7 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
0 slj
0 slc
7.500 slw
n 2880 1350 m 2565 1575 l 2565 1530 l 2610 1575 l
 2565 1575 l gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
2 slj
n 4005 1980 m 4004 1980 l 4002 1980 l 3997 1979 l 3990 1979 l 3981 1978 l
 3968 1977 l 3951 1975 l 3932 1973 l 3908 1971 l 3882 1969 l
 3853 1966 l 3821 1964 l 3787 1961 l 3750 1957 l 3712 1954 l
 3672 1951 l 3631 1947 l 3588 1944 l 3545 1940 l 3500 1937 l
 3454 1933 l 3407 1929 l 3359 1926 l 3310 1922 l 3259 1918 l
 3206 1915 l 3152 1911 l 3095 1907 l 3037 1904 l 2977 1900 l
 2915 1897 l 2853 1893 l 2790 1890 l 2720 1887 l 2653 1884 l
 2590 1881 l 2531 1879 l 2475 1877 l 2424 1875 l 2376 1874 l
 2331 1873 l 2289 1872 l 2250 1871 l 2213 1871 l 2178 1871 l
 2145 1870 l 2113 1870 l 2083 1870 l 2055 1871 l 2029 1871 l
 2005 1871 l 1982 1871 l 1962 1872 l 1944 1872 l 1929 1872 l
 1916 1872 l 1906 1873 l 1899 1873 l 1893 1873 l 1890 1873 l
 1888 1873 l
 1887 1873 l gs col4 s gr 
% Polyline
n 1511 1450 m 1511 1449 l 1513 1446 l 1515 1440 l 1517 1432 l 1521 1421 l
 1526 1407 l 1532 1391 l 1539 1371 l 1545 1350 l 1553 1327 l
 1560 1302 l 1567 1276 l 1575 1248 l 1582 1219 l 1588 1188 l
 1595 1154 l 1601 1118 l 1607 1079 l 1612 1037 l 1617 992 l
 1620 945 l 1622 898 l 1623 852 l 1623 809 l 1623 768 l
 1621 730 l 1619 695 l 1616 661 l 1612 629 l 1609 599 l
 1605 571 l 1601 543 l 1596 518 l 1592 494 l 1588 472 l
 1585 453 l 1582 438 l 1579 425 l 1577 416 l 1576 410 l
 1575 407 l
 1575 405 l gs col1 s gr 
% Polyline
n 1575 405 m 1575 406 l 1577 410 l 1578 416 l 1581 425 l 1585 437 l
 1591 453 l 1597 472 l 1604 494 l 1613 518 l 1622 544 l
 1631 572 l 1641 602 l 1652 632 l 1664 663 l 1675 695 l
 1688 728 l 1701 761 l 1715 797 l 1730 833 l 1746 871 l
 1763 910 l 1781 950 l 1800 990 l 1822 1036 l 1844 1078 l
 1864 1115 l 1882 1148 l 1899 1177 l 1915 1203 l 1929 1225 l
 1943 1246 l 1956 1264 l 1969 1281 l 1980 1296 l 1991 1309 l
 2000 1321 l 2008 1330 l 2015 1338 l 2019 1344 l 2022 1347 l
 2024 1349 l
 2025 1350 l gs col1 s gr 
% Polyline
n 855 2565 m 856 2564 l 857 2562 l 861 2557 l 866 2550 l 872 2541 l
 881 2528 l 892 2513 l 905 2495 l 919 2474 l 936 2452 l
 953 2427 l 971 2401 l 991 2373 l 1011 2344 l 1031 2315 l
 1052 2285 l 1073 2253 l 1094 2222 l 1116 2189 l 1139 2155 l
 1161 2121 l 1185 2085 l 1208 2048 l 1232 2009 l 1257 1970 l
 1281 1930 l 1305 1890 l 1336 1837 l 1364 1787 l 1388 1744 l
 1408 1705 l 1426 1670 l 1440 1640 l 1453 1613 l 1463 1588 l
 1473 1566 l 1480 1546 l 1487 1528 l 1493 1512 l 1497 1498 l
 1501 1486 l 1504 1477 l 1506 1470 l 1507 1466 l 1508 1463 l

 1508 1462 l gs col2 s gr 
% Polyline
n 1881 1878 m 1880 1878 l 1877 1879 l 1873 1880 l 1865 1882 l 1855 1884 l
 1843 1888 l 1828 1892 l 1810 1897 l 1791 1904 l 1770 1911 l
 1747 1919 l 1722 1929 l 1696 1939 l 1668 1952 l 1638 1967 l
 1606 1984 l 1570 2003 l 1531 2026 l 1489 2052 l 1443 2082 l
 1395 2115 l 1356 2143 l 1318 2171 l 1281 2199 l 1245 2227 l
 1211 2254 l 1179 2281 l 1148 2308 l 1118 2333 l 1089 2359 l
 1061 2383 l 1035 2408 l 1009 2432 l 984 2455 l 960 2478 l
 937 2501 l 915 2522 l 894 2542 l 875 2561 l 858 2577 l
 843 2592 l 831 2605 l 821 2615 l 813 2623 l 807 2629 l
 804 2632 l 802 2634 l
 801 2635 l gs col2 s gr 
% Polyline
n 2025 1350 m 2026 1351 l 2027 1352 l 2030 1354 l 2035 1357 l 2042 1362 l
 2051 1369 l 2062 1376 l 2076 1386 l 2091 1396 l 2109 1408 l
 2129 1421 l 2151 1434 l 2174 1448 l 2199 1463 l 2226 1479 l
 2256 1495 l 2287 1511 l 2320 1528 l 2357 1545 l 2396 1563 l
 2439 1582 l 2487 1601 l 2538 1622 l 2594 1643 l 2655 1665 l
 2721 1687 l 2790 1710 l 2849 1728 l 2908 1746 l 2967 1763 l
 3025 1779 l 3081 1794 l 3136 1808 l 3189 1822 l 3241 1834 l
 3292 1846 l 3341 1857 l 3390 1868 l 3437 1878 l 3483 1887 l
 3529 1896 l 3573 1905 l 3617 1913 l 3659 1921 l 3700 1928 l
 3740 1935 l 3778 1942 l 3813 1948 l 3846 1954 l 3877 1959 l
 3904 1964 l 3928 1968 l 3949 1971 l 3966 1974 l 3979 1976 l
 3990 1978 l 3997 1979 l 4001 1979 l 4004 1980 l
 4005 1980 l gs col4 s gr 
% Ellipse
n 1800 1575 315 315 0 360 DrawEllipse gs col0 s gr

% here ends figure;
% 
% here starts figure with depth 47
% Ellipse
7.500 slw
n 2520 1620 31 31 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 165.93 105.93] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 2475 1890 33 33 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 162.80 123.80] PATmp PATsp ef gr PATusp gs col0 s gr

% Polyline
2 slj
0 slc
n 2520 1620 m 2521 1623 l 2521 1630 l 2523 1641 l 2524 1654 l 2525 1669 l
 2526 1686 l 2525 1706 l 2524 1729 l 2520 1755 l 2515 1781 l
 2509 1804 l 2503 1824 l 2497 1841 l 2490 1856 l 2485 1869 l
 2480 1880 l 2477 1887 l
 2475 1890 l gs col0 s gr 
% here ends figure;
pagefooter
showpage
%%Trailer
end
%EOF
